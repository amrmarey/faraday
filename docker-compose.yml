# ================================
# Faraday Security Platform - Secure Docker Compose Deployment
# ================================
# Includes:
# - PostgreSQL (DB)
# - Redis (Cache)
# - Faraday App + Workers
# - Nginx Reverse Proxy (HTTPS)
# - Automated Self-signed Certificate Creation (on first run)
# - Health checks, resource isolation, scaling, and dependencies
# ================================

services:
  postgres:
    image: postgres:14
    container_name: faraday_postgres
    restart: always
    environment:
      POSTGRES_USER: faraday
      POSTGRES_PASSWORD: faraday_secure_pass
      POSTGRES_DB: faraday
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U faraday"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
    # Dependency: Base DB for Faraday App

  redis:
    image: redis:7
    container_name: faraday_redis
    restart: always
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    networks:
      - backend_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    # Used for caching and async job management

  faraday:
    image: infobyte/faraday
    container_name: faraday_app
    restart: always
    environment:
      FARADAY_POSTGRESQL_HOST: postgres
      FARADAY_POSTGRESQL_PORT: 5432
      FARADAY_POSTGRESQL_USER: faraday
      FARADAY_POSTGRESQL_PASSWORD: faraday_secure_pass
      FARADAY_REDIS_URL: redis://redis:6379/0
      FARADAY_SERVER_SECRET_KEY: "secret_$(openssl rand -hex 16)"
    depends_on:
      - postgres
      - redis
    networks:
      - backend_net
      - frontend_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5985/_api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      replicas: 2        # Scaling enabled
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
    # Core Faraday app handling user interaction and API

  nginx:
    image: nginx:latest
    container_name: faraday_nginx
    restart: always
    depends_on:
      - faraday
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend_net
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_certs:/etc/nginx/certs
    environment:
      - DOMAIN_NAME=faraday.local
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      # ==========================
      # Auto-generate self-signed certificate if not exists
      # ==========================
      CERT_DIR='/etc/nginx/certs';
      mkdir -p ${CERT_DIR};
      if [ ! -f ${CERT_DIR}/faraday.crt ]; then
        echo 'ðŸ”’ Generating random self-signed SSL certificate...';
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout ${CERT_DIR}/faraday.key \
          -out ${CERT_DIR}/faraday.crt \
          -subj '/C=EG/ST=Alexandria/L=Alex/O=Faraday/CN=${DOMAIN_NAME}';
      fi;
      echo 'âœ… Certificate ready, starting Nginx...';
      exec nginx -g 'daemon off;';
      "
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
    # Acts as HTTPS reverse proxy with auto cert generation
    # Handles traffic securely from external network to Faraday app

# ================================
# Network Segregation
# ================================
networks:
  frontend_net:
    driver: bridge
  backend_net:
    driver: bridge

# ================================
# Volumes
# ================================
volumes:
  pg_data:
  redis_data:
  nginx_certs:
